// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interactions.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReviewResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewResponseMultiError,
// or nil if none found.
func (m *ReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ReviewResponseMultiError(errors)
	}

	return nil
}

// ReviewResponseMultiError is an error wrapping multiple validation errors
// returned by ReviewResponse.ValidateAll() if the designated constraints
// aren't met.
type ReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewResponseMultiError) AllErrors() []error { return m }

// ReviewResponseValidationError is the validation error returned by
// ReviewResponse.Validate if the designated constraints aren't met.
type ReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewResponseValidationError) ErrorName() string { return "ReviewResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewResponseValidationError{}

// Validate checks the field values on GetReviewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsRequestMultiError, or nil if none found.
func (m *GetReviewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetReviewsRequestMultiError(errors)
	}

	return nil
}

// GetReviewsRequestMultiError is an error wrapping multiple validation errors
// returned by GetReviewsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReviewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsRequestMultiError) AllErrors() []error { return m }

// GetReviewsRequestValidationError is the validation error returned by
// GetReviewsRequest.Validate if the designated constraints aren't met.
type GetReviewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsRequestValidationError) ErrorName() string {
	return "GetReviewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsRequestValidationError{}

// Validate checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsResponseMultiError, or nil if none found.
func (m *GetReviewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReviews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReviewsResponseValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReviewsResponseValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewsResponseValidationError{
					field:  fmt.Sprintf("Reviews[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReviewsResponseMultiError(errors)
	}

	return nil
}

// GetReviewsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReviewsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReviewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsResponseMultiError) AllErrors() []error { return m }

// GetReviewsResponseValidationError is the validation error returned by
// GetReviewsResponse.Validate if the designated constraints aren't met.
type GetReviewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsResponseValidationError) ErrorName() string {
	return "GetReviewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsResponseValidationError{}

// Validate checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Review) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReviewMultiError, or nil if none found.
func (m *Review) ValidateAll() error {
	return m.validate(true)
}

func (m *Review) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorId

	// no validation rules for Text

	// no validation rules for AdId

	// no validation rules for Rating

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReviewId

	if len(errors) > 0 {
		return ReviewMultiError(errors)
	}

	return nil
}

// ReviewMultiError is an error wrapping multiple validation errors returned by
// Review.ValidateAll() if the designated constraints aren't met.
type ReviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewMultiError) AllErrors() []error { return m }

// ReviewValidationError is the validation error returned by Review.Validate if
// the designated constraints aren't met.
type ReviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewValidationError) ErrorName() string { return "ReviewValidationError" }

// Error satisfies the builtin error interface
func (e ReviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewValidationError{}

// Validate checks the field values on AddReviewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReviewRequestMultiError, or nil if none found.
func (m *AddReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorId

	// no validation rules for RecipientId

	// no validation rules for AdId

	// no validation rules for Text

	// no validation rules for Rating

	if len(errors) > 0 {
		return AddReviewRequestMultiError(errors)
	}

	return nil
}

// AddReviewRequestMultiError is an error wrapping multiple validation errors
// returned by AddReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type AddReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReviewRequestMultiError) AllErrors() []error { return m }

// AddReviewRequestValidationError is the validation error returned by
// AddReviewRequest.Validate if the designated constraints aren't met.
type AddReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReviewRequestValidationError) ErrorName() string { return "AddReviewRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReviewRequestValidationError{}

// Validate checks the field values on GetAverageRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAverageRatingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAverageRatingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAverageRatingRequestMultiError, or nil if none found.
func (m *GetAverageRatingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAverageRatingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetAverageRatingRequestMultiError(errors)
	}

	return nil
}

// GetAverageRatingRequestMultiError is an error wrapping multiple validation
// errors returned by GetAverageRatingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAverageRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAverageRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAverageRatingRequestMultiError) AllErrors() []error { return m }

// GetAverageRatingRequestValidationError is the validation error returned by
// GetAverageRatingRequest.Validate if the designated constraints aren't met.
type GetAverageRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAverageRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAverageRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAverageRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAverageRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAverageRatingRequestValidationError) ErrorName() string {
	return "GetAverageRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAverageRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAverageRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAverageRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAverageRatingRequestValidationError{}

// Validate checks the field values on AverageRatingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AverageRatingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AverageRatingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AverageRatingResponseMultiError, or nil if none found.
func (m *AverageRatingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AverageRatingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AverageRating

	if len(errors) > 0 {
		return AverageRatingResponseMultiError(errors)
	}

	return nil
}

// AverageRatingResponseMultiError is an error wrapping multiple validation
// errors returned by AverageRatingResponse.ValidateAll() if the designated
// constraints aren't met.
type AverageRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AverageRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AverageRatingResponseMultiError) AllErrors() []error { return m }

// AverageRatingResponseValidationError is the validation error returned by
// AverageRatingResponse.Validate if the designated constraints aren't met.
type AverageRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AverageRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AverageRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AverageRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AverageRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AverageRatingResponseValidationError) ErrorName() string {
	return "AverageRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AverageRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAverageRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AverageRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AverageRatingResponseValidationError{}

// Validate checks the field values on DeleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReviewRequestMultiError, or nil if none found.
func (m *DeleteReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	if len(errors) > 0 {
		return DeleteReviewRequestMultiError(errors)
	}

	return nil
}

// DeleteReviewRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReviewRequestMultiError) AllErrors() []error { return m }

// DeleteReviewRequestValidationError is the validation error returned by
// DeleteReviewRequest.Validate if the designated constraints aren't met.
type DeleteReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReviewRequestValidationError) ErrorName() string {
	return "DeleteReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReviewRequestValidationError{}

// Validate checks the field values on AddInteractionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddInteractionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddInteractionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddInteractionRequestMultiError, or nil if none found.
func (m *AddInteractionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddInteractionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AdId

	// no validation rules for SellerId

	// no validation rules for Type

	if len(errors) > 0 {
		return AddInteractionRequestMultiError(errors)
	}

	return nil
}

// AddInteractionRequestMultiError is an error wrapping multiple validation
// errors returned by AddInteractionRequest.ValidateAll() if the designated
// constraints aren't met.
type AddInteractionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddInteractionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddInteractionRequestMultiError) AllErrors() []error { return m }

// AddInteractionRequestValidationError is the validation error returned by
// AddInteractionRequest.Validate if the designated constraints aren't met.
type AddInteractionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInteractionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInteractionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInteractionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInteractionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInteractionRequestValidationError) ErrorName() string {
	return "AddInteractionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddInteractionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInteractionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInteractionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInteractionRequestValidationError{}

// Validate checks the field values on InteractionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InteractionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InteractionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InteractionResponseMultiError, or nil if none found.
func (m *InteractionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InteractionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return InteractionResponseMultiError(errors)
	}

	return nil
}

// InteractionResponseMultiError is an error wrapping multiple validation
// errors returned by InteractionResponse.ValidateAll() if the designated
// constraints aren't met.
type InteractionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InteractionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InteractionResponseMultiError) AllErrors() []error { return m }

// InteractionResponseValidationError is the validation error returned by
// InteractionResponse.Validate if the designated constraints aren't met.
type InteractionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractionResponseValidationError) ErrorName() string {
	return "InteractionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InteractionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractionResponseValidationError{}

// Validate checks the field values on GetInteractionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInteractionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInteractionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInteractionRequestMultiError, or nil if none found.
func (m *GetInteractionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInteractionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AdId

	// no validation rules for SellerId

	if len(errors) > 0 {
		return GetInteractionRequestMultiError(errors)
	}

	return nil
}

// GetInteractionRequestMultiError is an error wrapping multiple validation
// errors returned by GetInteractionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInteractionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInteractionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInteractionRequestMultiError) AllErrors() []error { return m }

// GetInteractionRequestValidationError is the validation error returned by
// GetInteractionRequest.Validate if the designated constraints aren't met.
type GetInteractionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractionRequestValidationError) ErrorName() string {
	return "GetInteractionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractionRequestValidationError{}

// Validate checks the field values on GetInteractionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInteractionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInteractionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInteractionResponseMultiError, or nil if none found.
func (m *GetInteractionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInteractionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInteractionResponseMultiError(errors)
	}

	return nil
}

// GetInteractionResponseMultiError is an error wrapping multiple validation
// errors returned by GetInteractionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInteractionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInteractionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInteractionResponseMultiError) AllErrors() []error { return m }

// GetInteractionResponseValidationError is the validation error returned by
// GetInteractionResponse.Validate if the designated constraints aren't met.
type GetInteractionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractionResponseValidationError) ErrorName() string {
	return "GetInteractionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractionResponseValidationError{}
